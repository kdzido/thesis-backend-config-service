buildscript {
    ext {
        springBootVersion = '1.5.12.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE')
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.4'
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'

import org.apache.tools.ant.filters.*

sourceCompatibility = 1.8
targetCompatibility = 1.8

group 'pl.pja.13868.news'
version '0.5.0'

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    integTestCompile.extendsFrom testCompile
    integTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integTest/java')
            srcDir file('src/integTest/groovy')
        }
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Edgware.SR3"
    }
}

dependencies {
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-config-server')

    compile('org.springframework.cloud:spring-cloud-starter-eureka')    // config backed by Netflix Eureka

    testCompile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    testCompile "org.codehaus.groovy.modules.http-builder:http-builder:${httpBuilderVersion}"
    testCompile "junit:junit:${junitVersion}"
    testCompile "org.spockframework:spock-core:${spockVersion}"
    testCompile("cglib:cglib-nodep:${cglibVersion}")

    testCompile('org.springframework.boot:spring-boot-starter-test')

    integTestCompile sourceSets.main.output
    integTestCompile "org.awaitility:awaitility-groovy:${awaitilityVersion}"
}

task integTest(type: Test) {
    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath
    description ='Integration tests'
    group = 'verification'
}

// TODO uncomment?
//integTest.mustRunAfter test


// TODO uncomment
//task createBuildInfoFile << {
//    def buildInfo = new File("$buildDir/build-info.properties")
//    def properties = new Properties()
//    properties.setProperty("version", project.version.toString())
////    properties.setProperty("timestamp", project.buildTimestamp) // TODO timestamp
//    properties.store(buildInfo.newWriter(), null)
//}

jar {
//    dependsOn createBuildInfoFile
    baseName = 'config-service'

    from(buildDir) {
        include 'build-info.properties'
        into('META-INF/')
    }
}

task copyJars(dependsOn: jar, type: Copy) {
    from jar
    into "$buildDir/dockerfile"
}

task copyDockerFiles(dependsOn: [copyJars], type: Copy) {
    from 'src/docker'
    into "$buildDir/dockerfile"

    String springBootJar = "config-service-${project.version}.jar"
    filter(ReplaceTokens, tokens: [springBootJar: springBootJar])
}

// TODO publish to artifactory
